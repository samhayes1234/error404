let faceapi;
let detections = [];

let video;
let canvas;

function setup() {
  canvas = createCanvas(480, 360);
  canvas.id('canvas');

  // Creat the video: 
  video = createCapture(VIDEO);
  //Change the video input's aspect ratio according to canvas:
  video.size(width, height);
  video.id('video');

  const faceOptions = {
    withLandmarks: true,
    withExpressions: true,
    withDescriptors: true,
    minConfidence: 0.5
  };

  //Initialize the model: 
  faceapi = ml5.faceApi(video, faceOptions, faceReady);
}

function faceReady() {
  faceapi.detect(gotFaces);// Start detecting faces:
}

// Got faces: 
function gotFaces(error, result) {
  if (error) {
    console.log(error);
    return;
  }

  detections = result;ã€€//Now all the data in this detections: 
  console.log(detections);

  clear();//Make back ground transparent:
  drawBoxs(detections);//Draw detection box:
  drawLandmarks(detections);//// Draw all the face points:
  drawExpressions(detections, 20, 250, 14);//Draw face expression:

  faceapi.detect(gotFaces);// Call the function again at here: 
}

function drawBoxs(detections){
  if (detections.length > 0) {//If at least 1 face is detected (box around face):
    for (f=0; f < detections.length; f++){
      let {_x, _y, _width, _height} = detections[0].alignedRect._box;
      stroke(239, 62, 36);
      strokeWeight(2);
      noFill();
      rect(_x, _y, _width, _height);
    }
  }
}

function drawLandmarks(detections){
  if (detections.length > 0) {//If at least 1 face is detected: 
    for (f=0; f < detections.length; f++){
      let points = detections[f].landmarks.positions;
      for (let i = 0; i < points.length; i++) {
        stroke(239, 62, 36);
        strokeWeight(3);
        point(points[i]._x, points[i]._y);
      }
    }
  }
}

function drawExpressions(detections, x, y, textYSpace){
  if(detections.length > 0){//If at least 1 face is detected (text of detection): 
    let {neutral, happy, angry, sad, surprised, fearful} = detections[0].expressions;
    textFont('Neue Pixel Grotesk');
    textSize(14);
    strokeWeight(.5)
    fill(239, 62, 36);
    stroke(0, 0, 0);
    strokeWeight(2);

    text("neutral:       " + nf(neutral*100, 2, 2)+"%", x, y);
    text("happy: " + nf(happy*100, 2, 2)+"%", x, y+textYSpace);
    text("angry:        " + nf(angry*100, 2, 2)+"%", x, y+textYSpace*2);
    text("sad:            "+ nf(sad*100, 2, 2)+"%", x, y+textYSpace*3);
    text("surprised:  " + nf(surprised*100, 2, 2)+"%", x, y+textYSpace*5);
    text("scared:           " + nf(fearful*100, 2, 2)+"%", x, y+textYSpace*6);
  }else{//If no faces is detected: 
    text("neutral: ", x, y);
    text("happy: ", x, y + textYSpace);
    text("angry: ", x, y + textYSpace*2);
    text("sad: ", x, y + textYSpace*3);
    text("surprised: ", x, y + textYSpace*5);
    text("scared: ", x, y + textYSpace*6);
  }
}
